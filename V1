<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            backdrop-filter: blur(10px);
        }

        .header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 300;
            margin-bottom: 10px;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .controls {
            padding: 30px;
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            justify-content: center;
            background: rgba(102, 126, 234, 0.05);
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .btn.delete {
            background: linear-gradient(135deg, #ff6b6b, #ee5a52);
        }

        .table-container {
            padding: 30px;
            overflow-x: auto;
            max-height: 70vh;
            overflow-y: auto;
        }

        .project-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .project-table th,
        .project-table td {
            padding: 15px 20px;
            text-align: left;
            border-bottom: 1px solid #f0f0f0;
            position: relative;
        }

        .project-table th {
            background: linear-gradient(135deg, #f8f9ff, #e8edff);
            font-weight: 600;
            color: #4a5568;
            text-transform: uppercase;
            font-size: 0.85rem;
            letter-spacing: 0.5px;
        }

        .project-table tr:hover {
            background: rgba(102, 126, 234, 0.05);
            transform: scale(1.01);
            transition: all 0.2s ease;
        }

        .row-counter {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            font-weight: bold;
            text-align: center;
            border-radius: 10px;
            min-width: 50px;
        }

        .editable {
            cursor: text;
            min-width: 120px;
            transition: all 0.2s ease;
        }

        .editable:hover {
            background: rgba(102, 126, 234, 0.1);
            border-radius: 8px;
        }

        .editable:focus {
            outline: 2px solid #667eea;
            background: white;
            border-radius: 8px;
        }

        .column-header {
            position: relative;
            cursor: text;
            padding: 15px 40px 15px 20px;
        }

        .delete-column {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: #ff4757;
            color: white;
            border: none;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 12px;
            opacity: 0;
            transition: all 0.2s ease;
        }

        .column-header:hover .delete-column {
            opacity: 1;
        }

        .delete-column:hover {
            background: #ff3742;
            transform: translateY(-50%) scale(1.1);
        }

        .delete-row {
            background: #ff4757;
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 14px;
            margin-left: 10px;
            opacity: 0;
            transition: all 0.2s ease;
        }

        .project-table tr:hover .delete-row {
            opacity: 1;
        }

        .delete-row:hover {
            background: #ff3742;
            transform: scale(1.1);
        }

        .stats {
            padding: 20px 30px;
            background: rgba(102, 126, 234, 0.05);
            display: flex;
            justify-content: space-between;
            align-items: center;
            color: #4a5568;
            font-weight: 500;
        }

        .input-field {
            border: 2px solid #e2e8f0;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        .input-field:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                border-radius: 15px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .controls {
                padding: 20px;
            }
            
            .table-container {
                padding: 15px;
            }
            
            .project-table th,
            .project-table td {
                padding: 10px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Project Manager</h1>
            <p>Create and manage your projects with dynamic tables</p>
        </div>
        
        <div class="controls">
            <button class="btn" onclick="addColumn()">+ Add Column</button>
            <button class="btn" onclick="addRow()">+ Add Row</button>
            <button class="btn" onclick="saveData()">üíæ Save Project</button>
            <button class="btn" onclick="loadData()">üìÅ Load Project</button>
            <button class="btn delete" onclick="clearAll()">Clear All</button>
            <input type="file" id="fileInput" accept=".json" style="display: none;" onchange="handleFileLoad(event)">
        </div>

        <div class="stats">
            <div>Total Rows: <span id="rowCount">0</span></div>
            <div>Total Columns: <span id="columnCount">2</span></div>
        </div>
        
        <div class="table-container">
            <table class="project-table" id="projectTable">
                <thead>
                    <tr>
                        <th class="row-counter">#</th>
                        <th class="column-header" contenteditable="true" onclick="editColumnName(this)">
                            Task Name
                            <button class="delete-column" onclick="deleteColumn(1)">√ó</button>
                        </th>
                        <th class="column-header" contenteditable="true" onclick="editColumnName(this)">
                            Status
                            <button class="delete-column" onclick="deleteColumn(2)">√ó</button>
                        </th>
                    </tr>
                </thead>
                <tbody id="tableBody">
                </tbody>
            </table>
        </div>
    </div>

    <script>
        let rowCounter = 0;
        let columnCounter = 2;

        function updateStats() {
            document.getElementById('rowCount').textContent = rowCounter;
            document.getElementById('columnCount').textContent = columnCounter;
        }

        function addColumn() {
            const table = document.getElementById('projectTable');
            const headerRow = table.querySelector('thead tr');
            const bodyRows = table.querySelectorAll('tbody tr');
            
            columnCounter++;
            
            // Add header
            const newHeader = document.createElement('th');
            newHeader.className = 'column-header';
            newHeader.contentEditable = true;
            newHeader.textContent = `Column ${columnCounter}`;
            newHeader.onclick = function() { editColumnName(this); };
            newHeader.innerHTML = `Column ${columnCounter}<button class="delete-column" onclick="deleteColumn(${columnCounter})">√ó</button>`;
            headerRow.appendChild(newHeader);
            
            // Add cells to existing rows
            bodyRows.forEach(row => {
                const newCell = document.createElement('td');
                newCell.className = 'editable';
                newCell.contentEditable = true;
                newCell.textContent = '';
                row.appendChild(newCell);
            });
            
            updateStats();
        }

        function addRow() {
            const tableBody = document.getElementById('tableBody');
            const headerRow = document.querySelector('thead tr');
            const columnCount = headerRow.children.length;
            
            rowCounter++;
            
            const newRow = document.createElement('tr');
            
            // Add row counter cell
            const counterCell = document.createElement('td');
            counterCell.className = 'row-counter';
            counterCell.innerHTML = `${rowCounter} <button class="delete-row" onclick="deleteRow(this)">√ó</button>`;
            newRow.appendChild(counterCell);
            
            // Add editable cells
            for (let i = 1; i < columnCount; i++) {
                const newCell = document.createElement('td');
                newCell.className = 'editable';
                newCell.contentEditable = true;
                newCell.textContent = '';
                newRow.appendChild(newCell);
            }
            
            tableBody.appendChild(newRow);
            updateStats();
        }

        function deleteRow(button) {
            if (confirm('Are you sure you want to delete this row?')) {
                const row = button.closest('tr');
                row.remove();
                rowCounter--;
                updateRowNumbers();
                updateStats();
            }
        }

        function deleteColumn(columnIndex) {
            if (confirm('Are you sure you want to delete this column?')) {
                const table = document.getElementById('projectTable');
                const allRows = table.querySelectorAll('tr');
                
                allRows.forEach(row => {
                    if (row.children[columnIndex]) {
                        row.children[columnIndex].remove();
                    }
                });
                
                columnCounter--;
                updateStats();
            }
        }

        function updateRowNumbers() {
            const rows = document.querySelectorAll('#tableBody tr');
            rows.forEach((row, index) => {
                const counterCell = row.querySelector('.row-counter');
                counterCell.innerHTML = `${index + 1} <button class="delete-row" onclick="deleteRow(this)">√ó</button>`;
            });
            rowCounter = rows.length;
        }

        function editColumnName(element) {
            element.focus();
            
            // Select all text when clicked
            const range = document.createRange();
            range.selectNodeContents(element);
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
        }

        function clearAll() {
            if (confirm('Are you sure you want to clear all data? This cannot be undone.')) {
                document.getElementById('tableBody').innerHTML = '';
                rowCounter = 0;
                updateStats();
            }
        }

        // Handle Enter key in editable cells
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && e.target.classList.contains('editable')) {
                e.target.blur();
            }
        });

        // Initialize stats
        updateStats();

        // Add some sample data
        addRow();
        addRow();
        
        // Fill in some sample data
        setTimeout(() => {
            const cells = document.querySelectorAll('.editable');
            if (cells.length >= 4) {
                cells[0].textContent = 'Design Homepage';
                cells[1].textContent = 'In Progress';
                cells[2].textContent = 'Setup Database';
                cells[3].textContent = 'Completed';
            }
        }, 100);
    </script>
</body>
</html>
